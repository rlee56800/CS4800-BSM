-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.address
(
    street text COLLATE pg_catalog."default",
    "number" numeric,
    zipcode numeric,
    city text COLLATE pg_catalog."default",
    state text COLLATE pg_catalog."default",
    address_id integer NOT NULL DEFAULT nextval('address_address_id_seq'::regclass),
    CONSTRAINT address_id PRIMARY KEY (address_id)
        INCLUDE(address_id)
);

CREATE TABLE IF NOT EXISTS public.customer
(
    "broncoID" numeric(9, 0) NOT NULL,
    first_name text COLLATE pg_catalog."default",
    last_name text COLLATE pg_catalog."default",
    address integer,
    dob date,
    phone_number numeric,
    CONSTRAINT customer_pkey PRIMARY KEY ("broncoID")
);

CREATE TABLE IF NOT EXISTS public.historical_price
(
    "productID" numeric(9, 0),
    date date,
    price money,
    hprice_id integer NOT NULL DEFAULT nextval('historical_price_hprice_id_seq'::regclass),
    CONSTRAINT hprice_id PRIMARY KEY (hprice_id)
        INCLUDE(hprice_id)
);

CREATE TABLE IF NOT EXISTS public.order_product
(
    order_id integer NOT NULL,
    product_id integer NOT NULL,
    quantity numeric NOT NULL DEFAULT 1,
    CONSTRAINT order_product_pk PRIMARY KEY (order_id, product_id)
);

COMMENT ON TABLE public.order_product
    IS 'bridge table that connects orders and products';

CREATE TABLE IF NOT EXISTS public.orders
(
    datetime timestamp without time zone,
    customer numeric(9, 0),
    order_id integer NOT NULL DEFAULT nextval('orders_order_id_seq'::regclass),
    total_price money,
    CONSTRAINT order_id PRIMARY KEY (order_id)
        INCLUDE(order_id)
);

CREATE TABLE IF NOT EXISTS public.product
(
    price money,
    name text COLLATE pg_catalog."default",
    product_id integer NOT NULL DEFAULT nextval('product_product_id_seq'::regclass),
    CONSTRAINT product_id PRIMARY KEY (product_id)
        INCLUDE(product_id)
);

CREATE TABLE IF NOT EXISTS public.professor
(
    "broncoID" numeric(9, 0) NOT NULL,
    first_name text COLLATE pg_catalog."default",
    last_name text COLLATE pg_catalog."default",
    address integer,
    dob date,
    phone_number numeric,
    department text COLLATE pg_catalog."default",
    office text COLLATE pg_catalog."default",
    research text COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS public.student
(
    "broncoID" numeric(9, 0) NOT NULL,
    first_name text COLLATE pg_catalog."default",
    last_name text COLLATE pg_catalog."default",
    address integer,
    dob date,
    phone_number numeric,
    enter_date date,
    grad_date date,
    major text COLLATE pg_catalog."default",
    minor text COLLATE pg_catalog."default"
);

ALTER TABLE IF EXISTS public.customer
    ADD CONSTRAINT address FOREIGN KEY (address)
    REFERENCES public.address (address_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_product
    ADD CONSTRAINT order_id FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_product
    ADD CONSTRAINT product_id FOREIGN KEY (product_id)
    REFERENCES public.product (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT "broncoID" FOREIGN KEY (customer)
    REFERENCES public.customer ("broncoID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

COMMENT ON CONSTRAINT "broncoID" ON public.orders
    IS 'cusomer''s bronco ID';


END;